<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// <auto-generated />
<#
int[] arities = Enumerable.Range(1, 10).ToArray();
#>
#nullable enable

using System.Collections;
using System.CodeDom.Compiler;

namespace Microsoft.AspNetCore.Http;

<# foreach (var arity in arities) { #>
[GeneratedCode("TextTemplatingFileGenerator", "")]
public sealed class EndpointFilterInvocationContext<<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>T<#=argumentCount#><# if (argumentCount < arity - 1) { #>, <# } #><# } #>> : EndpointFilterInvocationContext
{
    public EndpointFilterInvocationContext(HttpContext httpContext, <# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>T<#=argumentCount#> arg<#=argumentCount#><# if (argumentCount < arity - 1) { #>, <# } #><# } #>)
    {
        HttpContext = httpContext;
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>        Arg<#=argumentCount#> = arg<#=argumentCount#>;
<# } #>
    }

    public object? this[int index]
    {
        get => index switch
        {
<#  foreach (var argumentCount in Enumerable.Range(0, arity)) { #>            <#=argumentCount#> => Arg<#=argumentCount#>,
<# } #>
            _ => new IndexOutOfRangeException()
        };
        set
        {
            switch (index)
            {
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>               case <#=argumentCount#>:
                    Arg<#=argumentCount#> = (T<#=argumentCount#>)(object?)value!;
                    break;
<# } #>
                default:
                    break;
            }
        }
    }

    /// <inheritdoc />
    public override HttpContext HttpContext { get; }

    /// <inheritdoc />
    public override IList<object?> Arguments => new List<object?>() { <# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>Arg<#=argumentCount#>, <# } #>};

    <# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>internal T<#=argumentCount#> Arg<#=argumentCount#> { get; set; }
    <# } #>

    /// <inheritdoc />
    public override T GetArgument<T>(int index)
    {
        return index switch
        {
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>           <#=argumentCount#> => (T)(object)Arg<#=argumentCount#>!,
<# } #>
           _ => throw new IndexOutOfRangeException()
        };
    }
}
<# } #>
