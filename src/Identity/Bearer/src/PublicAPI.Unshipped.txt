#nullable enable
Microsoft.AspNetCore.Identity.BearerSchemeOptions
Microsoft.AspNetCore.Identity.BearerSchemeOptions.BearerSchemeOptions() -> void
Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions
Microsoft.AspNetCore.Identity.IBearerPayloadFactory<TUser>
Microsoft.AspNetCore.Identity.IBearerPayloadFactory<TUser>.BuildPayloadAsync(TUser! user, Microsoft.AspNetCore.Identity.JwtBuilder! jwtBuilder) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IdentityBearerOptions
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Audiences.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Audiences.set -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.IdentityBearerOptions() -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Issuer.get -> string?
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Issuer.set -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.SigningCredentials.get -> Microsoft.AspNetCore.Identity.JsonWebKey?
Microsoft.AspNetCore.Identity.IdentityBearerOptions.SigningCredentials.set -> void
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.IdentityDbContext() -> void
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.IdentityDbContext(Microsoft.EntityFrameworkCore.DbContextOptions! options) -> void
Microsoft.AspNetCore.Identity.IdentityToken
Microsoft.AspNetCore.Identity.IdentityToken.IdentityToken() -> void
Microsoft.AspNetCore.Identity.IdentityToken.Purpose.get -> string!
Microsoft.AspNetCore.Identity.IdentityToken.Purpose.set -> void
Microsoft.AspNetCore.Identity.IdentityToken.Revoked.get -> bool
Microsoft.AspNetCore.Identity.IdentityToken.Revoked.set -> void
Microsoft.AspNetCore.Identity.IdentityToken.UserId.get -> string!
Microsoft.AspNetCore.Identity.IdentityToken.UserId.set -> void
Microsoft.AspNetCore.Identity.IdentityToken.ValidUntil.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.IdentityToken.ValidUntil.set -> void
Microsoft.AspNetCore.Identity.IdentityToken.Value.get -> string!
Microsoft.AspNetCore.Identity.IdentityToken.Value.set -> void
Microsoft.AspNetCore.Identity.ITokenStore<TToken>
Microsoft.AspNetCore.Identity.ITokenStore<TToken>.CreateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.ITokenStore<TToken>.DeleteAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.ITokenStore<TToken>.FindAsync(string! purpose, string! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TToken?>!
Microsoft.AspNetCore.Identity.ITokenStore<TToken>.UpdateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.JsonWebKey
Microsoft.AspNetCore.Identity.JsonWebKey.AdditionalData.get -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.JsonWebKey(string! kty) -> void
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.get -> System.Collections.Generic.IList<string!>?
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.get -> string!
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Use.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Use.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.set -> void
Microsoft.AspNetCore.Identity.JWSAlg
Microsoft.AspNetCore.Identity.JwtBuilder
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.CreateJwtAsync() -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.JwtBuilder.Expires.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.JwtBuilder.Expires.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.get -> System.DateTimeOffset?
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.get -> string?
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.JwtBuilder(string! algorithm, string! issuer, Microsoft.AspNetCore.Identity.JsonWebKey! signingKey, string! audience, string! subject, System.Collections.Generic.IDictionary<string!, string!>? payload, System.DateTimeOffset notBefore, System.DateTimeOffset expires) -> void
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Payload.get -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Identity.JwtBuilder.Payload.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.get -> Microsoft.AspNetCore.Identity.JsonWebKey!
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Subject.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Subject.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>
Microsoft.AspNetCore.Identity.TokenManager<TUser>.ClaimsFactory.get -> Microsoft.AspNetCore.Identity.IBearerPayloadFactory<TUser!>!
Microsoft.AspNetCore.Identity.TokenManager<TUser>.ClaimsFactory.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>.Dispose() -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.TokenManager<TUser>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>.TokenManager(Microsoft.AspNetCore.Identity.UserManager<TUser!>! userManager, Microsoft.AspNetCore.Identity.IdentityErrorDescriber! errors, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.TokenManager<Microsoft.AspNetCore.Identity.IdentityToken!>!>! logger, Microsoft.AspNetCore.Identity.IBearerPayloadFactory<TUser!>! claimsFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityBearerOptions!>! bearerOptions) -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser>.UserManager.get -> Microsoft.AspNetCore.Identity.UserManager<TUser!>!
Microsoft.AspNetCore.Identity.TokenManager<TUser>.UserManager.set -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.AutoSaveChanges.get -> bool
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.AutoSaveChanges.set -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.Dispose() -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.SaveChanges(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.TokenStore(TContext! context, Microsoft.AspNetCore.Identity.IdentityErrorDescriber? describer = null) -> void
Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions
override Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder! builder) -> void
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddBearerServerAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.JwtBuilder.ReadJwtAsync(string! jwtToken, string! algorithm, Microsoft.AspNetCore.Identity.JsonWebKey? signingKey) -> System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string!, string!>?>!
static Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions.AddTokenStore<TContext>(this Microsoft.AspNetCore.Identity.IdentityBuilder! builder) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static readonly Microsoft.AspNetCore.Identity.JWSAlg.HS256 -> string!
static readonly Microsoft.AspNetCore.Identity.JWSAlg.None -> string!
static readonly Microsoft.AspNetCore.Identity.TokenManager<TUser>.AccessTokenName -> string!
static readonly Microsoft.AspNetCore.Identity.TokenManager<TUser>.RefreshTokenName -> string!
virtual Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.Tokens.get -> Microsoft.EntityFrameworkCore.DbSet<TToken!>!
virtual Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.Tokens.set -> void
virtual Microsoft.AspNetCore.Identity.IdentityToken.ConcurrencyStamp.get -> string?
virtual Microsoft.AspNetCore.Identity.IdentityToken.ConcurrencyStamp.set -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser>.CancellationToken.get -> System.Threading.CancellationToken
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser>.Dispose(bool disposing) -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser>.GetBearerAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser>.Logger.set -> void
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.Context.get -> TContext!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.CreateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.DeleteAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.FindAsync(string! purpose, string! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TToken?>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.UpdateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
