#nullable enable
const Microsoft.AspNetCore.Identity.TokenClaims.Audience = "aud" -> string!
const Microsoft.AspNetCore.Identity.TokenClaims.Expires = "exp" -> string!
const Microsoft.AspNetCore.Identity.TokenClaims.IssuedAt = "iat" -> string!
const Microsoft.AspNetCore.Identity.TokenClaims.Issuer = "iss" -> string!
const Microsoft.AspNetCore.Identity.TokenClaims.NotBefore = "nbf" -> string!
const Microsoft.AspNetCore.Identity.TokenClaims.Subject = "sub" -> string!
const Microsoft.AspNetCore.Identity.TokenFormat.JWT = "jwt" -> string!
const Microsoft.AspNetCore.Identity.TokenFormat.Single = "single" -> string!
const Microsoft.AspNetCore.Identity.TokenPurpose.AccessToken = "access_token" -> string!
const Microsoft.AspNetCore.Identity.TokenPurpose.RefreshToken = "refresh_token" -> string!
const Microsoft.AspNetCore.Identity.TokenStatus.Active = "active" -> string!
const Microsoft.AspNetCore.Identity.TokenStatus.Inactive = "inactive" -> string!
const Microsoft.AspNetCore.Identity.TokenStatus.Revoked = "revoked" -> string!
Microsoft.AspNetCore.Identity.BearerSchemeOptions
Microsoft.AspNetCore.Identity.BearerSchemeOptions.BearerSchemeOptions() -> void
Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions
Microsoft.AspNetCore.Identity.IAccessTokenClaimsFactory<TUser>
Microsoft.AspNetCore.Identity.IAccessTokenClaimsFactory<TUser>.BuildPayloadAsync(TUser! user, System.Collections.Generic.IDictionary<string!, string!>! payload) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IAccessTokenPolicy
Microsoft.AspNetCore.Identity.IAccessTokenPolicy.CreateAsync(string! tokenId, string! issuer, string! audience, System.Collections.Generic.IDictionary<string!, string!>! payload, System.DateTimeOffset notBefore, System.DateTimeOffset expires, System.DateTimeOffset issuedAt, string! subject) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IAccessTokenPolicy.ValidateAsync(string! accessToken, string! issuer, string! audience) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal?>!
Microsoft.AspNetCore.Identity.IdentityBearerOptions
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Audiences.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Audiences.set -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.IdentityBearerOptions() -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Issuer.get -> string?
Microsoft.AspNetCore.Identity.IdentityBearerOptions.Issuer.set -> void
Microsoft.AspNetCore.Identity.IdentityBearerOptions.SigningCredentials.get -> Microsoft.AspNetCore.Identity.JsonWebKey?
Microsoft.AspNetCore.Identity.IdentityBearerOptions.SigningCredentials.set -> void
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.IdentityDbContext() -> void
Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.IdentityDbContext(Microsoft.EntityFrameworkCore.DbContextOptions! options) -> void
Microsoft.AspNetCore.Identity.ITokenKeyRing
Microsoft.AspNetCore.Identity.ITokenKeyRing.GetAllKeysAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.TokenKey!>!>!
Microsoft.AspNetCore.Identity.ITokenKeyRing.GetCurrentKeyAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.TokenKey!>!
Microsoft.AspNetCore.Identity.ITokenKeyRing.GetKeyAsync(string! keyId) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.TokenKey!>!
Microsoft.AspNetCore.Identity.JsonWebKey
Microsoft.AspNetCore.Identity.JsonWebKey.AdditionalData.get -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.JsonWebKey(string! kty) -> void
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.get -> System.Collections.Generic.IList<string!>?
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.get -> string!
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Use.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Use.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.set -> void
Microsoft.AspNetCore.Identity.JWSAlg
Microsoft.AspNetCore.Identity.JwtBuilder
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.CreateJwtAsync() -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.get -> System.DateTimeOffset?
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.get -> string?
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.JwtBuilder(string! algorithm, string! issuer, Microsoft.AspNetCore.Identity.JsonWebKey! signingKey, string! audience, string! subject, System.Collections.Generic.IDictionary<string!, string!>! payload, System.DateTimeOffset notBefore, System.DateTimeOffset expires) -> void
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.get -> Microsoft.AspNetCore.Identity.JsonWebKey!
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.set -> void
Microsoft.AspNetCore.Identity.TokenClaims
Microsoft.AspNetCore.Identity.TokenFormat
Microsoft.AspNetCore.Identity.TokenKey
Microsoft.AspNetCore.Identity.TokenKey.Created.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.TokenKey.Created.set -> void
Microsoft.AspNetCore.Identity.TokenKey.Id.get -> string!
Microsoft.AspNetCore.Identity.TokenKey.Id.set -> void
Microsoft.AspNetCore.Identity.TokenKey.Key.get -> string!
Microsoft.AspNetCore.Identity.TokenKey.Key.set -> void
Microsoft.AspNetCore.Identity.TokenKey.TokenKey(string! id, string! key, System.DateTimeOffset created) -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Dispose() -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Options.get -> Microsoft.AspNetCore.Identity.TokenManagerOptions!
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Options.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.PayloadFactory.get -> Microsoft.AspNetCore.Identity.IAccessTokenClaimsFactory<TUser!>!
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.PayloadFactory.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Store.get -> Microsoft.AspNetCore.Identity.ITokenStore<TToken!>!
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.TokenManager(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions!>! identityOptions, Microsoft.AspNetCore.Identity.ITokenStore<TToken!>! store, Microsoft.AspNetCore.Identity.UserManager<TUser!>! userManager, Microsoft.AspNetCore.Identity.IdentityErrorDescriber! errors, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.TokenManager<TUser!, TToken!>!>! logger, Microsoft.AspNetCore.Identity.IAccessTokenClaimsFactory<TUser!>! claimsFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityBearerOptions!>! bearerOptions, Microsoft.AspNetCore.Identity.IAccessTokenPolicy! accessTokenPolicy, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.UserManager.get -> Microsoft.AspNetCore.Identity.UserManager<TUser!>!
Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.UserManager.set -> void
Microsoft.AspNetCore.Identity.TokenPurpose
Microsoft.AspNetCore.Identity.TokenStatus
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.AutoSaveChanges.get -> bool
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.AutoSaveChanges.set -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.Dispose() -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.SaveChanges(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.TokenStore(TContext! context, Microsoft.AspNetCore.Identity.IdentityErrorDescriber? describer = null) -> void
Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions
override Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder! builder) -> void
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddBearerServerAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser, TToken>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddIdentityCore<TUser, TToken>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBearerTokenBuilder!
static Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions.AddBearerTokens<TToken>(this Microsoft.AspNetCore.Identity.IdentityBuilder! builder) -> Microsoft.AspNetCore.Identity.IdentityBearerTokenBuilder!
static Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions.AddTokenStore<TContext>(this Microsoft.AspNetCore.Identity.IdentityBuilder! builder) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static readonly Microsoft.AspNetCore.Identity.JWSAlg.HS256 -> string!
static readonly Microsoft.AspNetCore.Identity.JWSAlg.None -> string!
virtual Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.Tokens.get -> Microsoft.EntityFrameworkCore.DbSet<TToken!>!
virtual Microsoft.AspNetCore.Identity.IdentityDbContext<TUser, TRole, TToken, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>.Tokens.set -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.CancellationToken.get -> System.Threading.CancellationToken
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.CheckTokenStatus(string! status) -> bool
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Dispose(bool disposing) -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.GetAccessTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.GetRefreshTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.Logger.set -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.NewAsync(Microsoft.AspNetCore.Identity.TokenInfo! info) -> System.Threading.Tasks.Task<TToken!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.RefreshTokensAsync(string! refreshToken) -> System.Threading.Tasks.Task<(string?, string?)>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.RevokeRefreshAsync(TUser! user, string! token) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TUser, TToken>.ValidateAccessTokenAsync(string! token) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal?>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.Context.get -> TContext!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.CreateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.DeleteAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.FindAsync(string! purpose, string! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TToken?>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.GetExpirationAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.DateTimeOffset>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.GetStatusAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.GetSubjectAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.NewAsync(Microsoft.AspNetCore.Identity.TokenInfo! info, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TToken!>!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.SetExpirationAsync(TToken! token, System.DateTimeOffset expiration, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.SetStatusAsync(TToken! token, string! status, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.SetSubjectAsync(TToken! token, string! subject, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.TokenStore<TToken, TContext>.UpdateAsync(TToken! token, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
